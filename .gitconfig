[user]
	email = 129603980+itislu@users.noreply.github.com
	name = Lukas Dullinger

[color]
	ui = true

[alias]
	aa = add --all
	ap = add --patch
	br = branch -v
	bra = branch -v -a
	bl = blame
	chp = cherry-pick
	chpa = cherry-pick --abort
	chpc = cherry-pick --continue
	cl = clone
	cl1 = clone --depth 1
	cm = commit -v
	cma = commit -v --amend
	cmane = commit -v --amend --no-edit
	cmm = "!f() { git commit -m \"$(echo $@)\"; }; f"
	co = checkout
	co- = checkout -
	cob = checkout -b
	coh = "!f() { git checkout HEAD~$1; }; f"
	com = "!f() { if git rev-parse --verify master >/dev/null 2>&1; then git checkout master; elif git rev-parse --verify main >/dev/null 2>&1; then git checkout main; else echo 'Neither master nor main branch found' && exit 1; fi; }; f"
	df = diff
	dfc = diff --cached
	dfh = "!f() { git diff HEAD~$1; }; f"
    dfm = "!f() { if git rev-parse --verify master >/dev/null 2>&1; then git diff master; elif git rev-parse --verify main >/dev/null 2>&1; then git diff main; else echo 'Neither master nor main branch found' && exit 1; fi; }; f"
	dfs = diff --staged
	dfw = diff -w
	dfcw = diff --cached -w
	dfs = diff --stat --summary
	fh = fetch
	fhu = fetch upstream
	mg = merge
	mga = merge --abort
	mgc = merge --continue
    mgm = "!f() { if git rev-parse --verify master >/dev/null 2>&1; then git merge master; elif git rev-parse --verify main >/dev/null 2>&1; then git merge main; else echo 'Neither master nor main branch found' && exit 1; fi; }; f"
	rb = rebase
	rba = rebase --abort
	rbc = rebase --continue
	rbh = "!f() { git rebase HEAD~$1; }; f"
	rbi = rebase -i
	rbih = "!f() { git rebase -i HEAD~$1; }; f"
    rbm = "!f() { if git rev-parse --verify master >/dev/null 2>&1; then git rebase master; elif git rev-parse --verify main >/dev/null 2>&1; then git rebase main; else echo 'Neither master nor main branch found' && exit 1; fi; }; f"
	rbo = rebase --onto
	rmt = remote
	rmtv = remote -v
	rmta = remote add
	rmtau = remote add upstream
	rs = reset
	rsh = "!f() { git reset HEAD~$1; }; f"
	rss = reset --soft
	rssh = "!f() { git reset --soft HEAD~$1; }; f"
	rv = revert
	rvh = "!f() { git revert HEAD~$1; }; f"
	pl = pull
	plm = "!f() { if git rev-parse --verify master >/dev/null 2>&1; then git pull origin master:master; elif git rev-parse --verify main >/dev/null 2>&1; then git pull origin main:main; else echo 'Neither master nor main branch found' && exit 1; fi; }; f"
	plr = pull --rebase
	ps = push
	psforce = push --force-with-lease
	sh = stash
	shp = stash pop
	sm = submodule
	st = status
	sw = switch
	swc = switch --create
	swm = "!f() { if git rev-parse --verify master >/dev/null 2>&1; then git switch master; elif git rev-parse --verify main >/dev/null 2>&1; then git switch main; else echo 'Neither master nor main branch found' && exit 1; fi; }; f"
	lg = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%ai%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
	lgp = log -p
	lgpw = log -p -w
	lgs = log --stat --summary
	lgt = log --abbrev-commit --decorate --graph --color --pretty='format:%C(yellow)%h %Creset%s %C(magenta)%an %C(green)%ar %Creset'
	lgf = log --follow
	lgpf = log -p --follow
	lgpwf = log -p -w --follow
	lgsf = log --stat --summary --follow
	lgtf = log --abbrev-commit --decorate --graph --color --pretty='format:%C(yellow)%h %Creset%s %C(magenta)%an %C(green)%ar %Creset' --follow
	pushall = "!fn(){ for a in `git remote`; do git push $a $(git rev-parse --abbrev-ref HEAD); done; };fn"
	pullall = "!fn(){ for a in `git remote`; do git pull $a $(git rev-parse --abbrev-ref HEAD); done; };fn"
	fetchall = "!fn(){ for a in `git remote`; do git fetch $a; done; };fn"

[filter "lfs"]
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
